---
title: Web Services API for nT
---
1. <%= teambadge %> **Web Services APIs** Examine the nt Web Services (REST) API routes from <%= link_to_topic :nt_functionality %>. You will see that the general pattern is laid out, but not all permutations are explained. Evaluate them in the context of this reading. You're welcome to improve them so they follow more pragmatic REST principles.

    Now, write "REST API Documentation" for the nanoTwitter service api. Look for examples on the web for how web APIs are documented for what you think is a good format. (Here's what twitter does as an example: [Twitter statuses API](https://dev.twitter.com/rest/reference/get/statuses/retweets_of_me).

    Remember that you have to state the url's "syntax" and the format of the input and output data (JSON). Your documentation should be good enough for a programmer who doesn't know anything about your app to properly access the API.

    You have a few other intersting alternatives: You can use [Swagger](https://swagger.io) to document your API and actually generate code for the service and the client. Or, you can use [GraphQL](http://graphql.org) to design a totally different, modern, yet non-REST Api. Both of these options are more advanced and would be recognized as a way to make your product more advanced. <%= team_deliverable "Markdown file documentation. Submit to Latte and also store in doc/ directory of your repo." %>