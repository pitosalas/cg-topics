---
title: Software Engineering
---
## Things I look for in a "Software Engineer"

* Excellent grasp of Computer Science fundamentals (roughly equivalent to our core Cosi B.S. requirements)
* Talent at design, architecture, coding, testing
* Excellent grasp of their chosen programming language
* Prioritizes longevity, maintainability, reusability, sharing (repositories, version management)
* Follows through on quality, fit and finish, and testing of all kinds at all levels
* Understands the eternal tradeoff: cost, time, schedule, delivery
* Reliable, transparent, willing to make commitments, able to meet them

## Dimensions
* Craft
  * Applies traditional techniques to produce goods and provide services
  * Examples: Cabinet making, Sewing, Teaching?
* Science
  * Aims to gather, verify and document knowledge and insight through research
  * Examples: Physics, Biology, Computer Science?
* Engineering
  * Applies both knowledge and scientifically analyzed and justified methods to develop and produce technical products
  * Examples: Electrical Engineering, Biomedical Engineering, Software Engineering?

### Creative tension
* "Well, it may be all right in practice, but it will never work in theory." -- Warren Buffett on how the academic community regards his investment approach
* "In theory, there is no difference between theory and practice. But, in practice, there is." -- Jan L.A. van de Snepscheut and/or Yogi Berra
* "In theory, the difference between theory and practice is small. In practice, the difference between theory and practice is large."
* "Beware of bugs in the above code; I have only proved it correct, not tried it." -- Donald Knuth

## What is Software Engineering?
* Engineering (from \[[reference\]](http://www.sciencedaily.com/articles/e/engineering.htm))
  * The creative application of scientific principles to design or develop structures, machines
  * To construct or operate the same with full cognizance of their design;
  * To forecast their behavior under specific operating conditions;
  * Respecting an intended function, economics of operation or safety to life and property
* Software Engineering (from me)
  1. People processes required to build working, deployed, software based systems
  1. Development methodology to deal with extreme complexity
  1. Primacy of deployed systems, used in the world, having real impact on people
  1. Triad of Money, Time and Quality

### How is it different from Computer Science?
* Science (from [Is Mathematics a Science?](http://www.arachnoid.com/is_math_a_science/)):
  1. Evidence gathered in experiments and observations.
  1. Theories about the evidence, theories that move from the particular to the general.
  1. The requirement that contradicting evidence falsify a theory.
* **Discussion:** Imagine what "<%= link_to_topic :experimental_computer_science %>" might mean?

## Why does Software Engineering matter in general
* Is it fundamentally different from "programming"? How?
* Do you want to be a Computer Scientist or a Software Engineer?
* Ok, but what is my degree in?
