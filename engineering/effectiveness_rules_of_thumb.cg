---
title: Personal Effectiveness Rules of Thumb
desc: "Pito's personal rues of thumb, learned from books, articles, and experiecne!"
slides: true
---
:h2 Personal Effectiveness Rules of Thumb (Pito)

:slide_title Ideas are cheap

*When you have your best idea ever, you should remember that the idea is just 1% of the journey*

* Yes, ideas are cheap. At least in the world of software engineering and product development, everyone and their grandfather have ideas that may be great. 
* The distance between the idea and the reality is great. 
* [Here's Steve Jobs about ideas](http://www.kaspertidemann.com/steve-jobs-on-the-difference-between-a-great-idea-and-a-great-product/)

:slide_title ABL

*Things change fast. Always be learning.* 

* Congratulations for picking one of the fastest changing fields around! 
* Software engineering, programming languages, libraries, platforms, hardware and software are constantly changing.
* It take a real sustained effort to keep yourself up to date. 
* Don't be too proud that you know all the details of node.js or ruby on rails. That knowledge evaporates. 
* The big, fundamental concepts, theories, philosopies, patterns change far more slowly. You need ot keep up your game.

:slide_title Toys

*When learning new things don't fall in love with the shiny toys* 

* It's ok to be proud in your expertise and trying to perfect your craft. 
* But platforms and languages come and go, and you must remain alert to newer and better ways to solve problems as they are invented. 
* Don't fall in love with a language or platform. It will change and the specific details you memorized will eventually become useless.

:slide_title Get out of the building!

*When arguing about a design or a feature, you should stop and go ask a user.* 

* Good products don't come from debate around a table, they come from discussion with the actual users. 
* Don't believe your intuition
* Don't guess, don't argue, go ask! 
* Ask a user
* This is known as "getting out of the building".

:slide_title Be a genius googler

*When you are spinning your wheels, you should stop, think, and only then act.* 

* Google It! The amount of knowledge and down and dirty solutions that you can find on google is infinite. 
* See a strange error message? Google it! 
* And learn how to edit the error message, removing the parts that are specific to you so that you get matches. 
* Or ask on the right forum or mailing list. 
* You need to learn how to ask a question in a way that it will be answered. Make it as easy as possible on the answerer.

:slide_title Do you email?

*When you are writing a 'business' email, you should follow best-practices*

1. If you expect action, have a single person in the to:
1. Know the difference between reply and reply all. Usually don't reply all
1. The first sentence or two should state what action you are looking for
1. Keep it short and sweet. Make it "skimmable".
1. Know your audience and write appropriately.
1. Get to the point. Be polite.

:slide_title Your eyes are bigger than your stomach

*When planning a project, you should work in short increments.* 

* Follow Agile practices, whatever your favorite flavor is, scrum, XP, Kanban, it doesn't matter. 
* Different teams and people like different approaches. And they change and evolve all the time. 
* But there are eternal truths there. 
* Work in small chunks. Even smaller. Even smaller. 
* Don't change many things at once because when your code invariably breaks, you won't be able to tell why.

:slide_title Adding people makes you slower!

*When your project is late, don't ADD people* 
* Most of the time this will slow you down.
* The reason is that with each additional person you add to a project you've created that many more paths of communication. 
* If a project is late, adding people to it will make it later. See [The Mythical Man Month](http://www.amazon.com/The-Mythical-Man-Month-Engineering-Anniversary/dp/0201835959) by Fred Brooks.

:slide_title Credits

* Many of these are from books, blogs and my own experience. I will list all the credits that I can identify but I think in some cases these rules are so deeply embedded that I cannot recall where I got them from. If you see something that you think you came up with, I appologize!

* [Practices of a Professional Developer](http://www.khebbie.dk/gist/9719703) by Klaus Hebsgaard
* [Practical Object Oriented Design in Ruby](http://www.poodr.com) by Sandy Metz
* [The Mythical Man Month](http://www.amazon.com/The-Mythical-Man-Month-Engineering-Anniversary/dp/0201835959) by Fred Brooks
* [The Pragmatic Programmer](http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X) by David Thomas
* [Debugging: The Science of Deduction](https://speakerdeck.com/daniellesucher/debugging-the-science-of-deduction)
* [Rob Pike's Rules](http://users.ece.utexas.edu/~adnan/pike.html)
