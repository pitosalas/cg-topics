---
title: "Coding Pattern: Classes and Objects"
---
:h4 Classes, Objects and Inheritance

* Classes: How do you decide what a class is and what it is not?
* What is the domain or the problem space or the problem domain?
* Look for Nouns!
* Remember SRP: Single Responsibility Principle (see [Single Responsibility Principle](https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html))
* Ask yourself: "What does this class represent/do?"

:slide_bigtitle Objects

* Classes and objects are different!
* Instance variables
* Constructor (no destructor in Ruby!)
* Methods: private/public

:slide_bigtitle Polymorphism

* When the same interface can be used with objects of different classes
  1. Example: In ruby, message #to_s can be sent to objects of different classes
  1. Why is it useful?

:slide_title Ways to achieve this:
1. Inheritance
1. "Duck" Typing
1. Delegation


:slide_title "Duck" typing.
1. Don't rely on the class/type of a thing to know what it can do
1. Reverse it: based on what it can do, you can tell the type of a thing.
1. How is duck typing is an alternative/complement to inheritance?
1. And what about Java interfaces?
1. Consider a method like #talk in a gaming application

:topic_link :duck_typing
