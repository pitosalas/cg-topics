---
title: Authentication and Authorization in Rails
slides: true
---

:h3 Complications that have to be considered

* What does the product do when user is not logged in?
  * Sometimes you have an artificial ("seed") user to be the non-logged-in user
* How to store the password
  * Never ever in free text
  * At minimum hashed
* Dealing with Social Media log in
  * Facebook
  * Google
* What to use for user id
  * A made up id (pitosalas) or just an email (pitosalas@gmail.com)
  
:slide_title Possible implementation strategies in Rails

1. Roll your own, using simple authentication. My preferred approach for this course.
1. Look at GoRails, they have several relevant lessons: [GoRails Authentication](https://gorails.com/episodes/omniauth-twitter-sign-in?autoplay=1)
1. [Devise](https://github.com/plataformatec/devise) is the most popular authentication package but I find it hard and overly complex.
1. Look at other options: [Clearance](https://github.com/thoughtbot/clearance) or [Sorcery]( https://github.com/Sorcery/sorcery),  [Authlogic](http://www.rubydoc.info/github/binarylogic/authlogic). 


## Demos

* [Building a Simple Session Based Authentication with Rails](https://hackernoon.com/building-a-simple-session-based-authentication-using-ruby-on-rails-9tah3y4j)
* :topic_link :basic_authentication
* :topic_link :clearance_authdemo
