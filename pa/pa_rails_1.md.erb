---
title: PA Rails 1
---
## Intro PA Rails 1

This assignment introduces the MVC architecture of Rails as you design a Web app in which users can select university classes. The data you need is available in this zip file: [PA_RAILS_JSON.zip](/content/topics/documents/PA_RAILS_JSON.zip). The zip file contains has 3 JSON files, each is a JSON array. Note: If you are using or already loaded data from [the original URL](http://www.cs.brandeis.edu//~prakhar/dataset.json), then you'll need to iterate through each line of that file and parsing each line as JSON - The entire file is not JSON formatted, just individual lines. Also DO NOT use/load entries of type "section" - there are too many of these and you'll end up exceeding the 10K records for a free database on Heroku. Only use data of type **instructor, course and subject.**

The purpose of this assignment is for each student to independently practice their knowledge of the material separate from the team work. What you learn and practice here will definitely contribute to your work on the team project. You will be using a lot of what you are learning in class and in the RORT. You might have to read ahead a little.

In the first part (of 3) you will build a basic rails application that imports and displays the data according to the instructions below.

## Part 1: Bootstrap UI, Import JSON files and Display data

1. Before creating your application: Since we will be deploying our app to Heroku, you MUST use PostgrSQL instead of sqlite because Heroku does not support sqlite. Follow [this comprehensive tutorial](https://devcenter.heroku.com/articles/getting-started-with-rails6) After following this tutorial you will have an app that’s up and running! Be sure to fully understand RORT chapters 1 & 2 before you follow this abridged tutorial.
1. As chapter 2 suggests, I highly recommend you setup a (**private**) GitHub repo and automatic deployment to Heroku at this step. It is far simpler to deploy to Heroku now than later on in the assignment. This step is covered in the short tutorial above, but you must generate multiple scaffolds. 
1. Use `rails generate scaffold` to generate appropriate models and views in order to represent the data for instructor, subject, and course.
1. Once you have created the above scaffolds, play with it to get a feel for what you have.
1. The university data is formatted in JSON. just examine the data. I have provided three separate JSON files. You will find detailed description from the university [specifying the data schema here](http://registrar-prod-rhel6.unet.brandeis.edu/export/readme.html). Take your time to understand each file and the data it contains/how it is organized. You need to look at the JSON files to see what the fields are that will be available. For example, courses have a field listing the subjects that the course belongs to using an array including subject ids. For now, it’s ok if you just display the ids.
1. You will need the JSON gem to read the files in. Inspect the files to see what the fields are you will need for your database tables. Instructions to read JSON files can be found here: [Read JSON files with Ruby](https://rubyinrails.com/2014/04/20/ruby-read-json-file-to-hash/).
1. Load the data into your database tables. **You don’t need to store every field/attribute, just the ones you would need and like to include in your app.** The logical place for that code is in the db/seeds.rb file. There are several ways to code the import. Here's a good article about [Importing Large Datasets in Ruby on Rails](https://medium.com/@eric_lum/importing-large-datasets-in-ror-why-you-should-use-activerecord-import-26fc915e6fd0). Note that the instructions in the article are not meant to be copied verbatim! However, they are very similar to what you will need to do. Carefully examine the code in the instructions and modify it to fit our app. You will need to do some more digging around tthe web to get this done, but this is a very clear and ambiguous task.
1. If you followed the RORT chapters, by this point you should have a home page. 
1. The home page of the application should display three tabs, as follows. 
    * Subjects - Displays all the subjects from the database
    * Courses - Displays all the courses from the database
    * Instructors - Displays all the instructors from the database
    * (If you are having trouble with setting up a home page with multiple tabs then re-read and re-do chapters 1-4)
1. The final step of this assignment is to set up your application to use Bootstrap for the UI. This can be easily accomplished if you follow RORT chapter 5. Only do this step once you have finished all the other steps. Note that simply including the gem in the gem file is not enough. You need to at least demonstrate that you have looked at the bootstrap documentation and understood the very basics. You need to leverage bootstrap somehow. Most likely you might choose to use the `grid` to control the layout to some extent. In the end it requires just a few html changes. We’re not asking for a specific look just demonstrate that you made the effort to grasp how bootstrap works and fits in.]**

## Timesaving Tips

* Look into the Hash#except and Hash#slice methods to help with cleaning up your imported data
* Check out these really useful gems
  * json to parse and process json files
  * activerecord-import to make loading lots of records faster and more efficient
  * better-errors to give you more legible errors from Rails
  * pry-rails to invoke the nicer repl called pry when you do a `rails console`

<%= ruby_begin %>
# Gemfile
gem 'activerecord-import'
gem 'json'
gem "better_errors"
gem "pry-rails"
<%= ruby_end %>

## Useful Links

* [ActiveRecord Import](https://github.com/zdennis/activerecord-import/wiki/Examples)
* [Importing Large Datasets in Ruby on Rails](https://medium.com/@eric_lum/importing-large-datasets-in-ror-why-you-should-use-activerecord-import-26fc915e6fd0)

## Continue to next pa in this sequence

**Click here to continue to <%= link_to_topic :pa_rails_2 %>**

## Deliverables:

1. Write a readme.md for your app including link to a **private** GitHub repo and your link to Heroku.
1. Submit to Latte a zipped up folder of your app. You can zip this up by deleting your `node_modules` and `vendor` folders in your Rails app, and then zip up the entire file to ensure it is below 20mb for Latte.

Assuming we have a folder called `test_app` for our Rails app, we can remove those folders and zip it using the following commands in our terminal, and replace `<submission-name>.zip` with the name we want our zip to be (i.e. `PitoSalas_PARails1.zip`.

<%= ruby_begin %>
rm -rf test_app/node_modules test_app/vendor
zip -r <submission-name>.zip test_app
<%= ruby_end %>
