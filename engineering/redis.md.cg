---
title: Redis
---
:slide_bigtitle Caching with "Redis"

:slide_title Advantages
* Blindingly fast
* Many data types: list, set, sorted set and hashes
* Atomic operations
* Has many uses: caching, message queue, publish subscribe, sharing application global state

:slide_title An instance of "network caching"
* Evolved from the original `cached`
* Typical structure is a key-value store
* A nosql database. But in memory!
* Ruby bindings [`gem redis`](https://github.com/redis/redis-rb)

:slide-title Wait, where's the data actually stored?
* A redis host, accessible by tcp/ip: dns name + port number
* You can run it: `$ redis-server`
* Heroku can run it for you with [Redis to go](https://devcenter.heroku.com/articles/redistogo). Nano size is free!
* In all cases, if the host dies, the data is gone (not 100% true)

:slide_title It has some interesting characteristics
* ATOMIC operations, e.g. "INCR" operation
* keys that expire (TTL)
* Supports other values: lists, sets, hashes
* And many many more

:slide_title Heroku
* Can provide a basic free instance of it
* Remember it has a URL and can be shared across applications
* `heroku redis:cli`

### Redis Concepts
* [Play with Redis](http://try.redis.io)
* Keys
  * are text with colons, e.g. global:usercount by convention
  * but can be anything. You decide your structure. Colons are recommended.
* Values
  * Are strings
  * Or compoounds: lists, sets, sorted sets, hashes
* Note we play with commands (a kind of a REPL)
* But you will be doing API calls

:source_begin :sql
SET key value                   # store a singular key and give it a value
GET key                         # retrieve its value
INCR key                        # add one to key value, should be an integer. Atomic!
DECR key                        # delete one from key value
EXPIRE key seconds              # key will cease to exsit `seconds` later
RPUSH key value                 # Append value to list
LPUSH key value                 # Prepend value to list
LPOP key                        # Remove first value
RPOP                            # Remvoe last value
SADD key value                  # Add value to set
SREM key                        # Remove value from set
SISMEMBER key value             # Is value a member of set
SUNION key1 key2                # Get union of two sets
ZADD key score value            # Add value with score to sorted set
HSET hashname hashkey value     # Add entry to hash
HHET hashname hashkey           # Retrieve a value from hash
:source_end

* Ahem: That is not all: [Redis Commands](https://redis.io/commands)

:slide_title Putting the it together
* Redis is a power tool!
* Don't be scared of putting lots of information into it
* Remember that it's a cache. You need to have real persistent store to recover
* Example:
  1. Display list of 50 most recent posts for users who are followed by user uid
  1. Key is: 50_tweets_for_user:uid
  1. Value is: ordered list of tweet ids
* Processing:
  1. When list is displayed
  1. When user :u tweets
