---
title: Intro to Automated Testing
---
:slide_title Intro to Automated Testing

* Unit testing: test a small unit of code that has few side effects
* Integration testing: test a subsystem that has many components
* User interface testing: see if the right thing happens when the user takes an action.
* End-to-end testing: test the complete system from top to bottom

:slide_title Also Consider

* Code Coverage: Seeing how much of your actual code is run during a test or production
* Performance testing: Checking the speed of your code

**NB: The Ruby community is especially focused on quality and testing**

:slide_title Why Test?

* Tests demonstrate that your code actually works!
* The mental habits needed to write tests parallel exactly those needed to design
* Testing and developing in parallel tends to surface more bugs early int he development
* Earlier fix is always cheaper
* A good test suite can act as a detailed spec
* A good test suite protects you from regressions
* It is faster to write code with tests than without it

:slide_title Discussion

* Let's take a look at: [Dumb Factorial Implementation](https://raw.githubusercontent.com/pitosalas/public_samples/master/ruby/tdd_demo0/dumb_factorial.rb)
* What other tests can we do to test this Factorial class?

:slide_title Tools

* There are a huge variety of tools and techniques to avoid repetitious coding
* We will be using the built-in unit testing framework called "minitest"
* For this course focus ONLY on unit testing
