---
title: PA Basic Control
desc: Demonstrate basic control of the robot
slides: true
---
:slide_title Purpose
This assignment is an will introduce you to creating a basic ROS program. It is the foundation of everything that follows. It is also a lot of fun!

:slide_title Skills that you will practice
* ROS App: Basic structure of a ros app, ROSCore and Nodes
* launch and run: Launch files, bringing up robots, running with simulation
* Motion: Control motion with cmd_vel
* Pubsub: publish and subscribe
* sensing: sensing with lidar and odom
* calc: Algorithms, calculations and state management
* Debug: *Finish, debug, and get an app to work"

:slide_title Expectations

* Be comfortable with python programming, linux shell
* Know the basics of the ROS distributed messaging architecture
* Understand the relationship between time, velocity, and distance
* Understand nodes, topics, publish, subscribe and messages
* You should have studied Chapter 2, Chatper 6 and Chapter 7

:slide_title Resources and Tips

* Refer: [How to determine the distance traveled by a robot by using odometry](https://www.theconstruct.ai/ros-qa-195-how-to-know-if-robot-has-moved-one-meter-using-odometry/).
* Refer: [How to rotate a robot to a desired heading using odometry](https://www.theconstruct.ai/ros-qa-135-how-to-rotate-a-robot-to-a-desired-heading-using-feedback-from-odometry)
* Refer: [How to compare two floats in Python using math.isclose()](https://stackoverflow.com/questions/5595425/)
* Tip: Press `Ctrl + R` while in Gazebo to reposition the simulated robot to its original pose. Spamming the command may sometimes be necessary.
* Tip: Use [format specifiers](https://peps.python.org/pep-0498/#format-specifiers) with f-strings to truncate long floats. It's easy to misread `number =
4.38411315886986e-06` as a large value if you miss the exponent `e-06` near the end, but `print(f'{number:9.4f}')` yields `0.0000` which is much less misleading.

:slide_title Assignment Specifics 
Here is what you are asked to do ([Sample Solution](https://www.youtube.com/watch?v=VVKwB_DNsKc&list=PLWp7_Yk4l1aPcMGxCCvqKCSwnkTBBInI3&index=72)
)

* Drive the robot 50cm out and 180 degree turn in place and try to get back to the same spot
* Drive robot in an exact 30 cm square
* Drive robot in a circle with a radius of 30cm
* Demonstrate this in sim

:slide_title How to run the starter code
1. `roslaunch turtlebot3_gazebo turtlebot3_empty_world.launch`
2. `rosrun basic_mover my_odom.py`
3. Comment in or out lines under `if __name__=='__main__':` in `basic_mover_answer.py`
   for desired behavior.
4. `rosrun basic_mover basic_mover.py`

:slide_title Tips and thought process
* Baseline
  * Note: this PA is done in simuilation
  * Locate the file pa1_starter.py in the cs119_src/ directory
  * Read it and the comments
  * Launch the provided gazebo environment and play with gazebo to get the hang of it
* Drive 1 meter out
  * Consider what it means to drive out 1 meter and stop
  * Use cmd_vel to move the robot forward
  * Collect current position from odom subscription
  * Monitor odom until it tells you that you've gone 1 meter
* 180 degree turn and return
  * How do you use cmd_vel to rotate in place
  * Again use odom, this time to monitor the orientation
  * Rotate until you see 180 degrees ( = 1*math.pi)


:slide_title Deliverables
*Filled in by Ephraim*


