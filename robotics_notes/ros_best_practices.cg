---
title: ROS Best Practices and Patterns
---
:slide_bigtitle ROS Best Practices and Patterns

:h3 Python 

* We use ROS1 Noetic which requires Python 3.x
* You can choose to use classes or just top level functions
* If you find yourself using `global` often, that's a code smell and a hint that you should be using classes
* Other code smells to watch out for are: Functions of more than 20 or so lines, and classes of more than 100 or so lines, 

:h3 ROS Nodes, Topics, Messages

* There’s rarely a need to design a custom message (.msg) If you need one it’s ok but you should try and avoid it if possible.
* As a general rule if you can organize your functionality into multiple separate ROS nodes you will get better modularity and reusability.
* Each node should be in its own file.
* As a general rule you can get nicer ROS code if you break the functionality into python classes and in separate files (packages)
* This works especially well if you can identify bits functionality that may be reused in other applications
* Don’t assume that /scan topic’s LaserScan message has 360 items in the ranges array. Even in our simple case, the YDLidar Driver we use seems to have 720 items, that is ½ degree entries. If you get that wrong your code just won’t work. You can use len(msg.ranges) to figure out the actual number you have.
* Don't ever use time.sleep() in a ROS callback. This will block the whole operation of ROS, causing other callbacks not to fire and other bad things.

:h3 Defining TFs (transforms)

* TFs have names which help you understand what physical component it is tied to
* TFs for mobile robots follow a typical hierarchy as follows: map -> odom -> base_link
* `base_link` for the “center” of the robot. You get to pick it but it should make some intuitive sense. All other parts of the robot are below base_link hierarchically in the tf tree
* Sometimes it’s useful to have another TF which is the center of the footprint of the robot, meaning, a TF projected straight down from base_link and intersecting with the ground plane wherever that is. 
* `odom` for the odometry created TF
* `map `for the TF of a map built by hand or through slam
* Conventional names and standards for TFs can be found here: (https://www.ros.org/reps/rep-0105.html) 

:h3 Transforms (TFs)

* TFs are fundamental to understanding anything relating to positions in ROS.
* TFs are built on a hierarchical system of relative positions between different parts of a robot or different objects in the world.
* The base_link is the “center” of the robot. You get to pick it but it should make some intuitive sense.
* TFs allow all other parts of the robot to be described as a relative position to either the base_link directly or to other parts on the robot. For example a robots arm could be defined as a relative position to the base_link and a claw attached to the arm could be defined as a relative position to the arm. This hierarchy forms the TF tree of relative transforms between objects in the world.
* Odometry is simply measuring the transform between the base_link and the origin point of your map (usually the position at which the robot started).
* Continuing the example from before, lets say I need to know the relative positions of the hand on our robot and an lever in the world. The TF tree allow us to calculate this automatically, the hand position relative to the arm is know, the arm position relative to the base_link is known, the base_link position relative to the world or map is known through odometry, and the lever position relative to the world/map is know, problem solved.


:h3 Package Structure

* Create properly structured packages so they can easily be added to other workspaces.
* Name the directory with the programs `src`
* Other directories should be present only if you use them
* Include a package.xml and CMakeFile.txt
* Use the create_package utility to create a correct package

:h3 Documentation

* It's a good idea to include a readme.md
* It's a good idea to include a license.md

:h3 Sources and references (quality varies a lot!)

* [List of other Best Practices](https://github.com/leggedrobotics/ros_best_practices/wiki)
* [ROS Best Practices](http://wiki.ros.org/Tutorials/Best%20Practices)
* [ROS Patterns](http://wiki.ros.org/ROS/Patterns)
* [More ROS Best Practices](http://wiki.ros.org/BestPractices)
* [Python Code Smells](https://towardsdatascience.com/5-python-code-smells-you-should-be-wary-of-c48cc0eb9d8b)
* [Several Ways of Writing a ROS Node](https://yuzhangbit.github.io/tools/several-ways-of-writing-a-ros-node/)