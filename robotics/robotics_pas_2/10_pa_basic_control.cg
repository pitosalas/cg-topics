---
title: PA Basic Control
desc: Demonstrate basic control of the robot
slides: true
---
:slide_title Introduction

* This assignment is an will introduce you to creating a basic ROS program
* You will control the robot to do a few autonomous behaviors
* Get practice with publishing to topics
* Get practice with using Timing to affect Robot behaviors
* You need to have studied PRR Chapter 1,2,3,6 and 7

:slide_title Expected preparation

* Python programming, linux shell
* Know the basics of the ROS distributed messaging architecture
* Understand the relationship between time, velocity, and distance
* Understand nodes, topics, publish, subscribe and messages

:slide_title Specific Readings (PRR)

1. pp.26-27 on frames, positions, orientations, and poses;
2. pp.77-80 on mobile platform actuation;
3. pp.85-87 on odometry;
4. pp.92-93 on simulators in general, and pp.95-96 on Gazebo in particular;
5. pp.99-103 on basic mobile platform actuation with the Wander-bot.

:slide_title What skills this assignment covers

* Basic structure of a ros app
* publish and subscribe
* cmd_vel for motion
* odom for odometry
* Run code in Simulation

:slide_title Requirements for the PA

* Drive the robot 50cm out and 180 degree turn in place and try to get back to the same spot
* Drive robot in an exact 30 cm square
* Drive robot in a circle with a radius of 30cm
* Demonstrate this in sim.

:slide_title Steps

* Baseline
  * Note: this PA is done in simuilation
  * Locate the file pa1_starter.py in the cs119_src/ directory
  * Read it and the comments
  * Launch the provided gazebo environment and play with gazebo to get the hang of it
* Drive 1 meter out
  * Consider what it means to drive out 1 meter and stop
  * Use cmd_vel to move the robot forward
  * Collect current position from odom subscription
  * Monitor odom until it tells you that you've gone 1 meter
* 180 degree turn and return
  * How do you use cmd_vel to rotate in place
  * Again use odom, this time to monitor the orientation
  * Rotate until you see 180 degrees ( = 1*math.pi)
  * ...more to come
  

:slide_title What to submit
* Zipped up source code
* url to 120 second youtube video s


# wall_follower

## Video

[Sample Solution](https://www.youtube.com/watch?v=yH474O4mAdw&list=PLWp7_Yk4l1aPcMGxCCvqKCSwnkTBBInI3&index=76)

## How to Run

### The Skeleton Code

1. `roslaunch turtlebot3_gazebo turtlebot3_stage_1.launch`
2. Move robot to the south of the southern wall in stage_1.
3. `rosrun wall_follower wall_follower.py`

### The Final Submission

1. `roslaunch turtlebot3_gazebo turtlebot3_stage_1.launch`
2. Move robot to the south of the southern wall in stage_1.
3. `rosrun wall_follower wall_follower_answer.py`

## Instructions

1. Subsribe to the `scan` topic to receive `LaserScan` messages.
2. Move the robot to the south of the souther wall in the `turtlebot3_stage_1` world.
3. Circumnavigate the wall by maintaining a constant distance.
4. Use PID control.
5. Demonstrate this in SIM.

## PRR Readings

Reference:

1. Chapter 6:
   1. section "Sensors", till start of "Visual Camera" subsection (pp.81-82).
   2. section "Laser Scanners" (p. 85).
2. Chapter 7, from section "Reading Sensor Data" to the end (pp. 103-108)

## Other Resources

1. [Robotics Programming: PID Algorithm](https://www.youtube.com/watch?v=dynSWBXu9aA): Shows how to implement the math of PID control in code, and gives a high-level overview of the algorithm.
2. [How to move objects in Gazebo using its GUI](https://answers.gazebosim.org//question/13445/how-to-move-objects-and-robot-models-using-gui/)
3. [Difference between Gazebo and RViz](https://answers.ros.org/question/200044/different-between-gazebo-and-rviz/)

## Notes

1. Get a feel for what kind of data the `scan` topic publishes by moving the robot around in Gazebo and executing `rostopic echo scan` on a separate terminal.

2. Change the `fixed_frame` in RViz from `odom` to `base_link` to make RViz graphically display the LIDAR readings.
