---
title: "PA: Out and back using Timing"
desc: "Robot drives out and returns by using elapsed time"
---
## Introduction
* This assignment is an introduction to robotic movement and publishing messages to ROS topics.

### Purpose

* Publish velocity movement commands to a robot in Gazebo simulation
* Use ROS timing in conjunction with velocity commands to move forward 1.5 meters, turn 180 degrees, and move back 1.5 meters to the same spot 

### Expected preparation
* Fundamentals of Python
* Know the basics of the ROS distributed messaging architecture
* Understand the relationship between time, velocity, and distance

### What I hope you will learn

* Learn the basics of programming in ROS
* Understand how to use the Gazebo simulator to run ROS programs
* Learn how to use movement velocity commands and time in ROS

### Topics and Message Types Used

* cmd_vel [Twist](http://docs.ros.org/melodic/api/geometry_msgs/html/msg/Twist.html)

## Assignment

* Publish movement commands to a robot in Gazebo simulation
* Use ROS timing to command the robot to move forward X distance and backwards X distance so the robot stops at it's original position (do not worry about robot's final orientation)  
* You can either modify existing code from the prrexamples repo or write your own python ROS node
* The instructions will give you the pieces of code to get you started but the rest will be up to you

### Deliverables

* Commented Python source code file named "FirstnameLastname_PA#"
* Video of your program running in gazebo or your lab at home 
* Both submitted in Latte

### Steps

* Clone the prrexamples repo and copy & paste a rosnode from prrexamples/scripts/anyfile.py OR create a new python file (for now the directory where you create it doesn't matter but  I would suggest keeping it in prrexamples or another ros package repo)
* The following modules/classes need to be imported. `rospy` provides an interface to the ROS system variables/methods and `Twist` is how we represent movement in ROS.

<%= source_begin "language-python"%>from geometry_msgs.msg import Twist
<%= source_end %>

* You will need to publish velocity commands known as `cmd_vel`'s that has a linear and rotational velocity vector components. 
* Do this by creating a publisher object

~~~~{.python}
example_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
~~~~
* It is also necessary to declare this python program as a ROS node

~~~~{.python}
rospy.init_node('node_name')
~~~~
* This is all the setup code we need to create a control loop that will loop while the node is still running. 
* Here is an example control loop that publishes a `cmd_vel` to move the robot forward at a constant velocity. 

~~~~{.python}
while not rospy.is_shutdown():
    twist = Twist()
    twist.linear.x = 0.2
    example_pub.publish(twist)
~~~~
* Use `rospy.Time` to get the current time.

~~~~{.python}
starting_time = rospy.Time.now()
~~~~

* This should be enough to get you started and for reference
* The units for `cmd_vel` are `linear=m/s angular=rad/s`

* Launch the gazebo simulator

~~~~{.python}
$ roslaunch turtlebot3_gazebo turtlebot3_empty_world.launch
~~~~

* Navigate to the directory that contains your python ROS node and run

~~~~{.python}
$ rosrun name_of_your_node.py
~~~~

### References and Resources

* Launch gazebo simulation <https://emanual.robotis.com/docs/en/platform/turtlebot3/simulation/>
* Python ROS node reference <http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29>
* Publishing velocity commands <http://wiki.ros.org/turtlesim/Tutorials/Moving%20in%20a%20Straight%20Line>
* How to use ROS time <http://wiki.ros.org/rospy/Overview/Time>

