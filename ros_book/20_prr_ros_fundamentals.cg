---
title: "2: ROS at a high level"
desc: "A quick flyby of the most important concepts of ROS"
slides: true
---
:h3 Introduction

* A distributed "operating system"
* A process coordinator and an inter-process communications model
* Different parts (nodes) can run on different computers
* They all need to be connected by a LAN via TCP/IP

:slide_title The ROS Graph - Nodes, Topics and Messages

* Fundamental concept in ROS
* ROS runs a number of collaborating processes called "nodes"
* Think of it as a program or a process which forms part of a system
  1. A real robot will have dozens to hundreds of nodes
  1. You can write nodes in Python (we will do) or C++
* Nodes talk to each other by publishing and subscribing to messages

:slide_title Example of a very simple node

:source_begin :language-python
#!/usr/bin/env python
# Don't forget to chmod +x topic_publisher.py

import rospy
from std_msgs.msg import Int32

# Make this into a ROS node.
rospy.init_node('topic_publisher')

# Prepare to publish topic `counter`
pub = rospy.Publisher('counter', Int32, queue_size=10)

# sleep at 2 loops per second
rate = rospy.Rate(2)
count = 0

# loop until ^c
while not rospy.is_shutdown():
    pub.publish(count)
    count += 1
    rate.sleep()

:source_end

:slide_title ROSCORE

* Program that acts as global coordinator of all the nodes
* It is run once at a known ip address or domain name
* Any other node will make contact with it to announce itself
* When one node talks to another, roscore helps them find each other and then steps out of the way.
* Everything starts with the 'traffic-cop' `roscore`
  1. Once `roscore` runs, additional nodes can run
* Each node is essentially a separate program, maybe even a single file
  1. A node can be written in Python or C++ (or really technically any language)
  1. We will use Python mostly

:slide_title Communication model

* Message based
* Most important model is "publish/subscribe"
* publish a **topic**, subscribe to a **topic**
* Many to many (Nodes can publish to many topics and subscribe to many topics)
* Topics have a name (e.g. /cmd_vel)
* Topics have an associated message
* Important to understand the difference between Topics and Messages
* Think of the topic as a function name, and the Message as argument list.

:slide_title Topics

* Topics have a name and a message type
* Two of the most common basic ones: `/cmd_vel` and `/odom`
* Topics can be published and subscribed
* Which sends a receives messages of a certain message type
* `cmd/vel`: sent to a robot to command it to move (locomotion)
* `odom`:  received from a robot to report where (it thinks) it is

:slide_title Message Types

* `Twist` message is used for `cmd_vel`
* Expresses a velocity in linear and angular aspects
  1. Note our robot can only move forward and backward (x axis)
  1. And it can only rotate around (z axis)
  1. Twist doesn't say anything about where the robot (thinks it) is
  1. "cmd_vel" is the topic to *directly* command the base (people often refer to the robot as a whole as the base) to move. The message type for cmd_vel is Twist

:slide_title Odometry 

* `Odometry` message  is used for `/odom` topic.
  1. The Robot's "belief" of where it is, and what it is doing.
  1. Based on sensors in the base, including possibly the motors, a GPS, a magnetometer etc.
  1. Odometry is published as topic /odom and the message definition is called nav_msgs/Odometry
* nav_msgs/Odometry
  1. Header - standard header
  1. pose - where does the robot thinks that it is (including Covariance - how sure is it?)
  1. twist - how does it think it is moving (also with a covariance)

