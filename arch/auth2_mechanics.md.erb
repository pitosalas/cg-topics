---
title: Authentication and Authorization Mechanics
slides: true
---
:slide_title  Authentication has to

1. Present a log in page
1. Present a account creation page
1. Check the "credentials"
1. Make the identity of the logged in user 'globally available' within your app
1. What is the 'identity of the logged in user?', it's just a method called 'logged_in_user' that when called returns an instance of the User model.

:slide_title But Should Not

1. Decide what operations that user may do or not. Conceptually and architecturally, should be kept separately
1. Store the user's password in a database. How do you authenticate then?

:slide_title Authorization

* Can "the currently logged in user" do this operation?
* Often implemented with a list of "user types" (e.g. admin, professor, student)
* And with a list of "operation types" (e.g. "administration", "read-write", "read-only")
* Guard code in each controller/action
