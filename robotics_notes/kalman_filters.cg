---
title: Kalman Filters
---
:slide_title What is a Kalman Filter?

* Given uncertain sensor data 
* And uncertain state information 
* And uncertain control inputs
* And uncertain measurements
* How do you get the best possible estimate of the state?
* Well supported by math and statistical analysis
* One key insight two inaccurate readings can be combined into an estimate that is more accurate than either one alone.

:slide_title Learning about Kalman Filters

* There is a lot written about it
* Because it is difficult and important
* The explanations are not consistent and don't use consistent nomenclature

:slide_title Estimation

* Kalman filter is an iterative model
* Each loop tries to make the state ESTIMATE more accurate
* By processing data from SENSORS (which are statistically characterized)
* And considering known control inputs (which are statistically characterized)
* And unknown perturbations (which are statistically characterized)
* Producing an updated estimate (which is statistically characterized)
* The loops happen at intervals that correspond to the rates that sensors are read

:slide_title Scenario

* An off-road robot moving around a field
* Using GPS for localization - which has a known inaccuracy on the order of 5-10 meters
* The robot can be asked to move forward or turn at a specified speed or be stationary
* State: position and velocity
* Control: motion commands
* Sensors: GPS ... odometry?

:slide_title Kalman estimate

:image :gpsrobot

:slide_title Why care?

Why do we care? Sensors are everywhere in robotics. Sensors are known to be inaccurate. Kalman filters are a family of algorithms that give us more accurate estimates by combining readings with known error rates

:slide_title System

* Kalman filter looks at a "system" which has a "state"
* The system may change over time
* Based on it's own internal operation
* Based on "control" input from the outside
* Based on "sensor" readings
* We gain information about the "system"
* By sensing data which allow us to infer system changes

:slide_title Kalman Filter

:image :500, :kalmanmodel

:slide_title State model

* Based on what is known about the system
* We can make a first guess of how the old state would change each step
* In other words, if I am at x=0 and I am moving at 1cm / second
* Then 1 second later, I am at x=0.01
* "all things being equal"

:slide_title State

* a vector (set) of numbers representing the state you are trying to measure
* Vector/Matrix representation is for ease of calculation
* But it can also make things look more complicated (for some people)
* Usually denoted by X, containing numbers, here are a series of examples
  1. current x or y position
  1. current speed in the x or y direction
  1. current distance from obstacle
  1. current altitude from the surface

:slide_title Control Model

* Look beyond the internal of the system, what is telling it to change?
* Control input: driver steps on break or accelerator
* Gravity is pulling the ball downhill
* cmd_vel is telling the robot to stop

:slide_title  Sensor Model

* Given a measurement from the outside world
* How does the state model change

:slide_title Video Interlude

:youtube "https://www.youtube.com/embed/CaCcOwJPytQ"

:slide_title 1D Scenario: bathroom scale

* Using a scale with a known error rate
* Sensor generates 10 readings per second
* You know that the weight won't change
* What do you use? Average? Weighted Average? Or?
* What if you have thousands of measurements (10 per second, like a bathroom scale)
* Models:
  1. State: unchanging (objects weight is  not expected to change)
  1. Control Inputs: (is an outside agent acting to change) None
  1. Measurement Model: (how accurate is the sensor)
  1. Update: What is the weight estimate now?


:slide_title 1D Scenario: Train

* A train is on a track and moving towards the terminator (which is a block)
* Train has a lidar sensing the wall
* We have a reading the speed based on the rotation of the wheels
* How does the train determine where it is?
* Models:
  1. State: Location and Velocity. Location changes a known amount each T
  1. Control Inputs: (is the driver stepping on the gas): No expected change
  1. Measurement model: (How accurate is the Lidar supposed to be)
  1. Update: What will be the new location and velocity estimate?

:slide_title Kalman Train

:image :600, :kalmantrain

:slide_title Abstraction of the Kalman Filter Equations

:image :kalmansimple

:slide_title Diagram of Kalman Filter Equations

:image :kalman

:slide_title Kalman Gain

* Where does the Kalman Gain come from?
* There are complex equations which use the covariance matrix with the estimates to compute a Kalman Gain
* But I've seen examples that skip that and use a constant

:slide_title How to understand

* Most examples you find will use linear algebra (not an expert) and store things in matrices
* If the `state` is location and velocity in the x direction (a falling ball) that is stored in a 1x2 matrix
* This simplifies the expression and calculation of the formulas but it is initially confusing
* That is unless you are fluent in matrix and linear algebra which I am not

:slide_break Links for further study

* [Detailed Youtube on Kalman FIlters](https://www.youtube.com/watch?v=u1QcZxWRYtg&list=PLX2gX-ftPVXU3oUFNATxGXY90AULiqnWT&index=10)
* Learning Kalman Filters: [The Extended Kalman Filter, an interactive tutorial](https://simondlevy.academic.wlu.edu/kalman-tutorial/)
* [Kalman Filter In Depth](https://www.kalmanfilter.net/kalman1d.html)
* [How a Kalman Filter Works, in pictures](http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/)
* [Extended Kalman Filter Tutorial for Non-Experts](https://simondlevy.academic.wlu.edu/kalman-tutorial/)
* [Kalman Filter for Dummies](http://bilgin.esme.org/BitsAndBytes/KalmanFilterforDummies)
* [Kalman Filter: Predict, Measure, Repeat](https://medium.com/@tjosh.owoyemi/kalman-filter-predict-measure-update-repeat-20a5e618be66)
