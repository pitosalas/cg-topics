---
title: "Service API - 3: CI/CD"
---

## Introduction to CI/CD

* Continuous Integrations and Continuous Deployment. It is one of the building blocks of the practice of `devops`. 
* Some people describe it as "process as code." Instead of writing down instructions for a human to follow, if the deployment process can be turned into code then we can bring great software engineering practices to the operation of our servers. 
* Just imagine having hundreds if not more servers (droplets) then imagine the previous parts of this assigment being done over and over by hand!
* Process automation by writing "code" in simple text files
* This can now be managed by source code control and revision histories
* It can be subjected to automated testing, modularity etc.

### Prerequisites

* You must complete :topic_link :hw_105_digital_ocean_1  and <%= link_to_topic :hw_105_digital_ocean_2 %> first, with 2 droplets and a database up and running on DO

### Deliverables
* Your deliverable for this step is to answer these warmup questions. Keep your code clean though because at the end of the series we will ask you to submit your code!
  * What is the role of the `journalctl` command?
  * What are some alternative services to do CI/CD other than Github Actions?
  * Explain how you would introduce automated testing. In other words if I had a ruby program that I could run with the command `ruby services_api_tests.rb`, how and where would I place it in the GitHub Actions file, if anywhere?

## Detailed Instructions

### Step 1 - Setup Github Actions file

We are going to use Github Actions to setup our continuous deployment pipeline.

What it does is to automate what we did before *with ssh, git clone etc...* with a simple workflow file.

Create a file named `ci.yml` under directory `.github/workflows` in your repo.

<pre>
<code class="language-yaml">name: Deploy to cloud

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: (Frontend) Copy file via scp
      uses: appleboy/scp-action@master
      env:
        HOST: ${{ secrets.FRONTEND_HOST }}
        USERNAME: root
        PORT: 22
        KEY: ${{ secrets.FRONTEND_SSHKEY }}
      with:
        source: "."
        target: "/home/rails/service-api-example"

    - name: (Frontend) Bundle and restart app server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.FRONTEND_HOST }}
        USERNAME: root
        PORT: 22
        KEY: ${{ secrets.FRONTEND_SSHKEY }}
        script: |
          su - rails -c "cd /home/rails/service-api-example/frontend-sinatra && bundle"
          sudo systemctl restart rails.service
    - name: (Service API) Copy file via scp
      uses: appleboy/scp-action@master
      env:
        HOST: ${{ secrets.API_HOST }}
        USERNAME: root
        PORT: 22
        KEY: ${{ secrets.API_SSHKEY }}
      with:
        source: "."
        target: "/home/rails/service-api-example"

    - name: (Service API) Bundle and restart app server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.API_HOST }}
        USERNAME: root
        PORT: 22
        KEY: ${{ secrets.API_SSHKEY }}
        script: |
          su - rails -c "cd /home/rails/service-api-example/service-api-sinatra && bundle"
          sudo systemctl restart rails.service
</code></pre>

This is what it looks like visually.

<%= include_image "/content/topics/images/github_actions.png", extra: "style=\"max-width: 145%;\"" %>

What happens internally is, every time a new commit is pushed to your repo, Github Actions spawns a VM and executes the given command (or what they call it "Actions").
There are a variety of Actions you can specify: a simple one would be `ssh-action`, where it `ssh` into a given machine and executes whatever commands you specified.

* A [list of actions](https://github.com/marketplace?type=actions) available.
* [Configuration options](https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow) for creating a workflow file.

### Step 2 - Setup secrets

This pipeline needs to have access to your droplets in order to update them.

Go to `Settings` -> `Secrets` and add the following keys:

- `FRONTEND_HOST`
  - The public v4 ip of `frontend-sinatra` droplet
- `FRONTEND_SSHKEY`
  - The private key `.ssh/id_rsa` of `frontend-sinatra` droplet
- `API_HOST`
  - The public v4 ip of `service-api-sinatra` droplet
- `API_SSHKEY`
  - The private key `.ssh/id_rsa` of `service-api-sinatra` droplet

<%= include_image "/content/topics/images/secrets.png", extra: "style=\"max-width: 145%;\"" %>

If you don't have the private key in your sever, you need to generate them and add the public key to `authorized_keys`.

1. `ssh-keygen`
2. `cd .ssh`
3. `echo "$(cat id_rsa.pub)" >> authorized_keys`
4. To show the content of your private key `cat id_rsa` <- copy this to the corresponding `*_SSHKEY`

### Step 3 - Trigger the pipeline

Now you have the Secrets all set up, you need to push your code to trigger the pipeline.

<pre>
<code class="language-bash">git add .github/workflows/ci.yml
git commit -m "Add auto-deploy pipeline"
git push
</code></pre>

You should see the pipeline running under `Actions`

<%= include_image "/content/topics/images/pipeline.png", extra: "style=\"max-width: 145%;\"" %>

Once it finish you should be able to see the updated site at http://frontend-sinatra/

**To see the logs of any of your apps**

<pre>
<code class="language-bash">doctl compute ssh service-api-sinatra --ssh-command "journalctl -u rails.service -e -f"</code>
</pre>

### **Congrats! You now have a auto-deploying pipeline!** ðŸŽ‰
