---
title: Hands On Forms Demo
---
:slide_title Set up and modify gem file

:source_begin :ruby
rails new formsdemo -d postgresql

bundle
:source_end

:slide_title Make models and define associations

:source_begin :ruby
rails generate scaffold items title:string  description:string owner:text category_id:integer
rails generate scaffold categories title:string description:string
rails generate scaffold comments from:string message:string item_id:integer
:source_end

:slide_title Model changes

:source_begin :ruby
# category.rb
has_many :items

# item.rb
belongs_to :category
has_many :comments
:source_end

:slide_title Create seed data (seeds.rb)
* Notice an interesting way to create test data:

:source_begin :ruby
# db/seeds.rb
puts "creating categories"
Category.destroy_all

books = Category.create(title: "book", description: "Books, Magazines etc.")
electronics = Category.create(title: "electronics", description: "Computer, Cellphone, etc")
clothing = Category.create(title: "clothing", description: "Shoes, Jackets, Belts, etc")
jewelry = Category.create(title: "jewelry", description: "Rings, watches, necklaces, etc")

owners = ["Jane Smith", "Ira Levin", "George Benson"]
colors = ["red", "brown", "green", "white", "tiny"]
clothingnames = ["shoes", "wallet", "belt"]
adjective = ["My favorite", "The perfect", "A great"]
categories = [books, electronics, clothing, jewelry]

puts "creating sample items"
50.times do
  title = colors.sample + " " + clothingnames.sample
  description = adjective.sample + " " + title
  Item.create(title: title, description: description, owner: owners.sample, category: categories.sample)
end
:source_end

:slide_title Create dbs and add seed data

:source_begin :ruby
rails db:create
rails db:migrate
rails db:seed
:source_end

:slide_title Add Bootstrap

* Notice not using a gem, to keep it simple
* Update views/layouts/application.html.erb

:slide_title Update the routes

:source_begin :ruby
# config/routes.rb

Rails.application.routes.draw do
  resources :categories
  resources :items do
    collection do
      get 'search'
      get 'do_search'
    end
    resources :comments, only: [:index, :create, :new]
  end
  root 'items#index'
end
:source_end

* Notice: how the categories resource stays flat
* Notice how items > comments is a nested resource
* Notice how the collection is set up
* Perform a `rails routes` after you edit routes.rb to see what it created
s
:slide_title Define the search form:

:source_begin :ruby
# views/items/search.html.erb
<div>
  <h1>Search</h1>
    <%= form_tag(do_search_items_path, method: "get") do %>
      <div>
        <label>Title</label>
        <%= text_field_tag(:title, "") %>
      </div>

      <%= submit_tag("Search") %>
    <% end %>
</div>
:source_end

:slide_title And it's corresponding actions

* Why does search have two actions?
* What controller do these actions go in?
* Notice how to do "like" in order to allow close matches
* Notice how we factor out the index page so we get a parital

:source_begin :ruby
#/controllers/items_controller.rb

  def search
  end

  def do_search
    @items = Item.where("title LIKE ?", "%#{params\[:title\]}%")
  end

# views/items/_index.html.erb
<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Description</th>
      <th>Owner</th>
      <th>Category</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <%% @items.each do |item| %>
      <tr>
        <td><%= item.title %></td>
        <td><%= item.description %></td>
        <td><%= item.owner %></td>
        <td><%= item.category_id %></td>
        <td><%= link_to 'Show', item %></td>
        <td><%= link_to 'Edit', edit_item_path(item) %></td>
        <td><%= link_to 'Destroy', item, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>
:source_end

:slide_title Let's add some Bootstrap

* Bootstrap is already "included" in layouts/application.html.erb
* We bring it to life by adding classes to strategic spots

:source_begin :ruby
# views/items/index.html.erb
<h1>Listing items</h1>

<%= render "index" %>
<br>
<div class=btn-group %>
  <%= link_to 'New Item', new_item_path, class: "btn btn-default" %>
  <%= link_to 'Search', search_items_path, class: "btn btn-default" %>
</div>
:source_end

:slide_title Now lets add some additional controls

* A drop down control which will allow user to pick search options
* Notice also that now we use the _index.html.erb partial to display an index right along with the search result
* This is pointing the way to AJAX!

:source_begin :ruby
<h1>Search</h1>
<%= form_tag(do_search_items_path, method: "get", class: "form") do %>
  <div class="row tbalign-items-center bg-primary text-light p-2">
    <div class="col-sm-8">
    <div class="row">
      <div class="col">
        <%= text_field_tag(:title, "", class: "form-control-sm", placeholder: "search for") %>
      </div>
      <div class="col pt-1">
        <label class="fg-light">Return: </label>
        <%= select_tag(:match_no_match,
        options_for_select(
        [['only matching', "match"],
          ['only non matching', "nomatch"]
        ]), class: "form-control-sm") %>
      </div>
      <div class="col">
        <%= submit_tag("Search", class: "btn btn-dark form-control-sm") %>
      </div>
    </div>
    </div>
  </div>
<% end %>
<%= render "index" %>
:source_end

:source_begin :ruby
  def search
    @items = Item.all
  end

  def do_search
    sql_string = "title LIKE ?"
    sql_string = "title NOT LIKE ?" if params[:match_no_match] == 'nomatch'
    @items = Item.where(sql_string, "%#{params[:title]}%")
    render "search"
  end

:source_end
