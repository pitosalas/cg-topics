---
title: How do forms and views work?
---

* You need a form whenever the browser needs to send data to the server
* `<form>` tag begins the group of fields. It declares the URL that payload is sent to
  1. There are zero or more fields
  1. There's always a "submit" link or button that triggers the sending
  1. &lt;form> terminates the group
* Sending always is done via some kind of HTTP request
  1. Payload is always name=value pairs, value is always text over the wire
  1. Request is usually **POST** if the form is creating something.
  1. In the case of, e.g. a **search** form, a **GET** is more appropriate.
  1. See [HTTP Methods: GET vs POST](https://www.w3schools.com/tags/ref_httpmethods.asp)

:slide_title Rails

* There are always TWO controller actions:
  1. one to display the form
  1. one to accept the data from the form
  1. Where can I find them for items?
  1. Two controller actions means TWO urls!
* Display the form
  1. Let's look at what the HTML should look like
  1. Difference between `form_tag` and `form_with`: let's look at two examples (p.s. `form_for` is deprecated)
  1. Why is there an Item.new in the form display action (new)?
* Accept data from the form
  1. What URL is requested to send the data? What http verb? Why?
  1. How does the data come back from the form?
  1. What can the controller do with that data?
* Security issues
  1. What if the form payload is not coming from your form?
  1. What if your form has been modified inside the browser?
  1. Explain params.require()
  1. Explain injection attacks

:slide_title More complicated case

* Nested resources
* Routes automatically create a set of helpers
* `resource` routes create a complete set of CRUD helpers
* Consider difference between:

:source_begin :ruby
# /items, /items/3, /items/3/comments, /items/3/comments/5
resources :items do
  resources :comments
end

# /items, /items/5, /comments, /comments/4
resources :items
resources :comments
:source_end

* Different URLS have varied impact
* Is it meaningful to specify, e.g. /comments/44 ?
* When you create a new comments, are you required to specify what book it's in?
* How is the POST different?
* Does the form display to add a comment work differently?
  * Using form_with vs. form_tag in this situation
* What would the URL look like to accept the data of the new comment?
  * Let's read the action and understand what it does
* How do you create a nested resource, i.e. a comment for item 3?

### Making Views DRY

* When you see yourself writing the same html over and over again
* write a helper: let's do an example!
* write a partial: And let's do another example!

### Summary

* Routes
  * Understand the urls and verbs and how they map to controller actions
  * Use rake routes to verify your understanding
  * Make changes to routes.rb to get the urls and verbs you intend
* Forms
  * Two actions, one to display the form, one to send the payload to the server
  * form_with and form_tag are equally good. In real cases you end up with form_tag often
  * Understand params and params.require
  * Forms for nested resources
* Other tools
  * helpers to generate repetitive html
  * partials to build repetitive html
  * rake db:migrate:reset and rake db:seeds
