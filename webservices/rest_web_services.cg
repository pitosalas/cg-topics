---
title: REST and Web Services
slides: true
---

:slide_bigtitle REST and Web APIs

* What is a web site?
* It can be more than a url for people to access information
* It can also deliver a service to other programs
* Instead of just returning HTML for web browsers to render
* It returns *data* for other programs to use.
* Such a server is often said to be delivering a *web service* or *web API*.

:callout :small, "Modularity", " This brings the notion of modularity, isolation, information hiding all the way up to the level of full servers. And creating an application can now become the stringing together of web services, each of which might be delivered by a different company (think Amazon, Heroku, Apple, IBM)"

:slide_title Scenario

* Consider this web page: [Brandeis Course Catalog](http://registrar-prod.unet.brandeis.edu/registrar/schedule/classes/2019/Spring/1400/all)
* How would you design an app to display courses and allow students create their schedules?
* Grab all the text
    `curl http://registrar-prod.unet.brandeis.edu/registrar/schedule/classes/2019/Spring/1400/all > brandeiscourses.txt`
* Write a program to parse that page and then load the results into a database.
* This is called "scraping" and usually that would violate a copyright
* Server can also deliver information in "machine readable" formats (such as JSON or XML)

:slide_title API

* The term "API" is used to describe the permissable ways that one program can call another, such as a library
* Web Service API is when this is between servers on the internet
* The Brandeis Course Catalog used to implement such an API! [Readme for Registrar's Web Service](http://registrar-prod-rhel6.unet.brandeis.edu/export/readme.html). [Actual JSON Data](http://registrar-prod-rhel6.unet.brandeis.edu/export/export.json)

:slide_title Protocols

* This can be done with many different standards and formats and protocols
    * SOAP: [Simple Object Access Protocol](http://wikis.olin.edu/coursecatalog/doku.php?id=course_listings:engr)
    * XML-RPC: [XML-RPC](http://en.wikipedia.org/wiki/XML-RPC)
    * JSON-RPC: [JSON-RPC](https://en.wikipedia.org/wiki/JSON-RPC)
    * REST: [Representational State Transfer](http://en.wikipedia.org/wiki/Representational_state_transfer) -- our focus

:discussion "What are some of the big differences between calling a gem's API directly vs calling a web service API?. Performance? Error handling and recovery? Security? Cost sharing?"

:slide_title  Pause to look at the big picture!

* Servers on the internet, anywhere, can be called as objects and methods
* Resources of all kinds can be offered to clients with no coordination
* The internet becomes a huge, amazing Operating System

:slide_title One level deeper: RPC - Remote Procedure Calls

* Imagine a procedure (method): `get_fortune() => String`
* So for example: `get_fortune()` => returns a piece of text (not html)
  * e.g. `get_fortune() => "You will live a long life"`
  * I could use it to improve my calendar app to optionally display the a fortune each week
  * Or, I could use it to create a twitter "robot" to answer a certain tweet with a fortune or joke
* What would it mean to call it between two computers?
* What would it mean to call it between two computers over the internet?
* How would you approach it?
* REST - A different way to think about RPC

:slide_title REST based on HTTP: Mini review

* HTTP Verbs: GET (HEAD), PUT, POST, DELETE.
* Think of everything in terms of a 'resource' that is being manipulated
* For example, GET means get a representation of the resource marked, e.g.
    * `GET http://www.facebook.com/user/pitosalas`
    * `GET http://www.facebook.com/users`
    * `GET http://myaddressbook.com/cards/1.xml`
* Also consider nested or associated resources
    * `GET http://www.nanotwitter.com/user/pitosalas/tweets/10231`
* Some things are harder to fit with the model
  * What might a fortune cookie service look like as REST?
  * The 'resource' here is a single fortune `https://fortune.onrender.com/fortune/1`
  * I can also ask for all fortunes `https://fortune.onrender.com/fortune`
  * But things get weird, and don't necessarily feel like a resource
    * `https://fortune.onrender.com/fortune/random`
    * `https://fortune.onrender.com/fortune?about=money`
    * `https://fortune.onrender.com/fortune/create`

* Note fortunes/random, random is not exactly identifying a resource; but close enough.

* What if caching was done strictly by url? Advantages:
  * some rhyme or reason on how to build urls and
  * make logical use of url space
  * Different 'representations' possible: html and xml, but others too, say csv or video
  * Big one: Standards allow caching in the cloud. But what about 'random' case? TTL!

:slide_title Accessing a web service

* Accessing and testing out a Web Api before using it
* Writing throw away code ("spikes")
* Use a gem or build a gem: isolation
* Don't be scared: How to look inside a gem at its code (see gem `gem-open`)
* If the gem doesn't do what you need, look for another one!
* Data conversions are often a challenge

:slide_title Look at the code
* [QuestionAnswer (the client)](https://github.com/pitosalas/questionanswer/tree/prod)
* [Fortune (the service)](https://fortune.onrender.com)
* [Render.com (the cloud PaaS)(http://www.render.com)