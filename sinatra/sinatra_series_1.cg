---
title: "Sinatra Series 1: Basic Plumbing"
---
:h2 Purpose

This is the start of a multi-part series of Sinatra introductory lectures. While Sinatra is far simpler than Rails, and easier to understand, it still is a new framework. These series will introduce you step by step to Sinatra and in particular the aspects that are related to Scaling.

:h2 Some valuable links:
* [Minitest/Spec](https://github.com/seattlerb/minitest)
* [Sinatra Testing](http://sinatrarb.com/testing.html)
* [Sinatra ActiveRecord Extension](https://github.com/janko-m/sinatra-activerecord)
* [ActiveRecord Basics Guide](https://edgeguides.rubyonrails.org/active_record_basics.html)
* [ActiveRecord Migration Guide](https://edgeguides.rubyonrails.org/active_record_migrations.html)

:h3 Mission

* Implementing a simple service in Sinatra
* Service = Web Service = Web API
* It will offer CRUD operations on a database
* It will use Sinatra and ActiveRecord

:h3 Key technologies, standards, libraries, etc.

* Like Rails, developing Sinatra apps involves many other pieces of technology
* Some of it is very reminiscent of Rails
* Some is new.
  * Ruby
  * Sinatra
  * ActiveRecord
  * Erb
  * Postgres
  * JSON
  * Minitest

:h2 Setting Up Sinatra

* Make sure you have the following installed:
  * rbenv (1.2.0 = latest) [install instructions](https://github.com/rbenv/rbenv)
  * ruby 3.1.0 **use rbenv commands to install 3.1.0 as your "global" ruby**
  * git 2+ [install instructions](https://github.com/git-guides/install-git)
  * postgres [install instructions](https://www.postgresql.org/download/)

:h3 Checking your installation

Don't worry if you don't have precisely the same version number. Ask if you're not sure

:source_begin :bash
rbenv -v; ruby -v; git --version; psql --version
rbenv 1.2.0
ruby 3.1.0p0 (2021-12-25 revision fb4df44d16) [x86_64-darwin21]
git version 2.28.0
psql (PostgreSQL) 13.3
:source_end

:h3 Ensure you have these gems
:source_begin :bash
sinatra (2.1.0)
sinatra-activerecord (2.0.25)
:source_end

## Recommended directory structure
* Unlike Rails, Sinatra does not dictate a directory structure
* I have found the following to work well
* The reason it looks a tiny bit like Rails is because it accommodates ActiveRecord most easily that way

:source_begin :bash
/config
  database.yml
/db
  /migrate
    ...migration files
  schema.rb (generated)
/views
  ...erb files
/test
  ... test files
/models
  ... activerecord model files
config.ru
Gemfile
app.rb
Rakefile
:source_end

:h3 Key files
:source_begin :bash

# Gemfile
source "https://rubygems.org"

gem "sinatra"
gem "activerecord"
gem "sinatra-activerecord"
gem "pg"
gem "rack-test"

# Rakefile
require './app'
require 'sinatra/activerecord/rake'

# app.rb
require 'sinatra'

get '/' do
  "Hello Sinatra!"
end


# config.ru
require './app'
run Sinatra::Application

# database.yml, where we declare various DB
# settings and parameters
development:
  adapter: postgresql
  encoding: unicode
  database: sin_series_dev
  pool: 2

test:
  adapter: postgresql
  encoding: unicode
  database: sin_series_test
  pool: 2

production:
  adapter: postgresql
  encoding: unicode
  database: sin_series_prod
  pool: 2
  username: your_username
  password: your_password

:source_end

:h2 Using Rack::Test to do TDD

* Add `gem rack-test` to Gemfile, `bundle`
* Notice that all your server does so far is to return `hello sinatra` when it receives a `GET` at root
* Lets test that
* We are going to be using Rack::Test with Minitest/Spec

:source_begin :bash

# test/root_test.rb
ENV['APP_ENV'] = 'test'

require_relative '../app.rb'
require 'minitest/autorun'
require 'rack/test'

include Rack::Test::Methods

def app
  Sinatra::Application
end

describe 'The HelloWorld App' do

  it "says hello" do
    get '/'
    last_response.ok?
    assert_equal last_response.body, 'Hello Sinatra!'
  end
end

:source_end

* When you run this program (`ruby test/root_test.rb`) it will run the test and it should succeed
* This is the basic pattern we will use for testing.
