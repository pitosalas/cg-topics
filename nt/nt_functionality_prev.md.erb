---
title: nano Twitter Functionality (old version)
desc: Details of the funtcionality (looking from the outside) that nanoTwitter requires
---
## General Notes

* NanoTwitter (nT) is a baby version of Twitter designed as a platform for experimentation with scaling issues.
* The list of features and URLs is quite incomplete. It is meant to set the pattern for you to build upon.
* All the URLs, both for the User Interface and for the Web Services API will attempt to follow REST design principles as far as possible.

## nT Functionality

### Users

* can register for an account by supplying an email a name and a password
* are never deleted
* are assigned a numeric id (the record id)

### Logged in users:

* Can follow and unfollow other registered users
* Can tweet
* Can see the flow of the last n tweets by the users that they have followed

### Non-logged in users:

* Will not see anything on the root (home) page (e.g. nt.com/)
* Will see a specific user's tweets on their page (e.g. nt.com/user/12)

### Tweets:

* Consist of
  * a 280 characters of text
  * a date-time of creation
  * Anything else you want to add to make it more impressive (e.g. mentions, tags, etc.)
* Belong to one user
* Can never be deleted

## Features
* Beyond the core CRUD features listed above
* Login/Logout and a profile
* Search
* Mentions
* Tags

## nT Web Services (REST) API
:callout :small, "URL", " APIs all start with /api/v1"/

* GET /tweets/23 - return tweet with id 23
* GET /users/23 - return user information for user 23
* GET /tweets/recent - return the recent 50 tweets for this user (if api token is supplied)
* GET /tweets/recent - return the recent 50 tweets for the system (if no api token is supplied)
* GET /users/23/tweets - return user 23's recent 50 tweets
* POST /tweets/new - create a new tweet

### Notes
* You need to figure out the other ones.
* The objective is that someone can write, for example, an iPhone nanoTwitter client that would use this API to implement the functionality.

### JSON
* API calls work with Values as JSON, as example:
  * Tweet:
`{  "id": 123,
    "text": foobar,
    "created": jan-11-2015
}`
  * User: `{"id": 12, "email": xu@nanotwitter.org}`
  * List of tweets: `[<tweet>, <tweet>,...]`
  * Follow list: `["user_id": 22, "user_id": 23, ...]`

## nT User Interface
* Basic bootstrappy html/css/javascript interface at minimum
* Clean but doesn't have to be fancy

### Routes
* Non-logged-in root page (/)
  * Login link
  * Sign up link
* Logged-in root page (/)
  * "Users I follow": List of most recent 50 tweets of users you follow + your own tweets
  * "All users": List of the most 50 tweets on the platform + your own tweets
  * Ability to tweet
  * Mini-profile
* Specific user's page (/user/1234)
  * User 1234's most recent 50 tweets
  * User 1234s mini-profile
  * Button to follow that user (available only if logged in and not looking at self.)
  * Link to list of users followed by this user. Link text is a count.
  * Link to list of newest tweets of users followed by this user.
  * Link to list of users following this user. Link text is a count.
* Functionality pages
  * Display the user registration page (/user/register)
  * Display user login prompt, and check for correct password (/login)
  * Logout (/logout)
  * Display Search interface (/search)

:topic_include :nt_test_interface 

:topic_include :nt_scalability_testing_protocol 
