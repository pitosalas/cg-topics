---
title: "7: Wander Bot"
desc: Simulating behavior in simulation
---
:callout :small, "NOTE!", " All the book instructions make reference to turtlebot_xxx. We will be using turtlebot3_xxx"

## Intro

* We will modify the instructions from the book so follow along here!
* Code will be part of `prrexamples` package which we have been using: [prrexamples](https://github.com/campusrover/prrexamples)
* Setup the simulation packages for Turtlebot3 by following [11. Simulation](http://emanual.robotis.com/docs/en/platform/turtlebot3/simulation/). In particular make sure you add the turtlebot3_simulations package, as follows:

:source_begin :language-bash
$ cd ~/catkin_ws/src/
$ git clone https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git
$ cd ~/catkin_ws && catkin_make
:source_end

## Red Light! Green Light!

* Pretty trivial, toe in the water
  * Drive forward for a bit
  * Stop.
  * Repeat
* Look at red_light_green_light.py
* Run code:

:source_begin :language-bash
$ roslaunch turtlebot3_gazebo turtlebot3_world.launch
$ ./red_light_green_light.py
:source_end

## Reading Sensor Data
* TB3 has a lidar
* Lidar returns and array of 360 doubles (and some other stuff)
* 0 degrees is straight ahead
* Each element has distance to nearest obstacle (in M)
* Compute bearing (in degrees) of element i as follows:

:source_begin :language-python
bearing = ((msg.angle_max - msg.angle_min) / (len (msg.ranges) - 1) * i + msg.angle_min
:source_end

* To compute the distance to the obstacle immediately ahead (0 degrees)
  * `msg.ranges[0]`
* To compute the nearest obstacle:
  * nearest_obstacle = min(msg.ranges)
* But of course those won't be very useful (why?)

* Experiment by running laser_scan.py program and understanding it
* Experiment by seeing how the scan data changes based on where the simulated robot is

:source_begin :language-bash
$ roslaunch turtlebot3_gazebo turtlebot3_world.launch
$ rostopic echo scan
:source_end

## Sensing and Actuation: Wander-bot!
* Program will perform a pretty stupid trick
* It will drive in a straight line for some seconds
* Then it will spin in place for some more seconds
* If it is too near an obstacle then it will spin in place
* It turns out this is a pretty terrible algorithm
* It gets stuck all the time
* Take a look at the annotated code: [Wander Bot Code](https://github.com/campusrover/prrexamples/blob/master/scripts/wander.py)

* `rospy.Time.now()`
  * returns a time structure with
  * fields secs and nsecs
  * Comparison operator is defined
  * rospy.Duration(x) is an interval, in seconds

* Now run the program
:source_begin :language-bash
$ roslaunch turtlebot3_gazebo turtlebot3_stage_3.launch
$ chmod +x  wander.py
$ ./wander.py
:source_end

## Summary
* Logic in a `.py` program can establish behaviors
* It's possible to modify an existing python program to be a ROS node
* Nodes can publish and subscribe, and do both at the same Time
* Need to know the exact names of the topics
* Simulator is used for an idealized context for testing
